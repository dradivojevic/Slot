// Generated by Haxe 3.4.7
(function ($hx_exports) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.array = function(it) {
	var a = [];
	var i = it.iterator();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var game = new hx_slotGame_Game();
};
Math.__name__ = true;
var Perf = $hx_exports["Perf"] = function(pos,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(pos == null) {
		pos = "TR";
	}
	this._perfObj = window.performance;
	if(Reflect.field(this._perfObj,"memory") != null) {
		this._memoryObj = Reflect.field(this._perfObj,"memory");
	}
	this._memCheck = this._perfObj != null && this._memoryObj != null && this._memoryObj.totalJSHeapSize > 0;
	this._pos = pos;
	this._offset = offset;
	this.currentFps = 60;
	this.currentMs = 0;
	this.currentMem = "0";
	this.lowFps = 60;
	this.avgFps = 60;
	this._measureCount = 0;
	this._totalFps = 0;
	this._time = 0;
	this._ticks = 0;
	this._fpsMin = 60;
	this._fpsMax = 60;
	this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
	this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	this._createFpsDom();
	this._createMsDom();
	if(this._memCheck) {
		this._createMemoryDom();
	}
	if(($_=window,$bind($_,$_.requestAnimationFrame)) != null) {
		this.RAF = ($_=window,$bind($_,$_.requestAnimationFrame));
	} else if(window.mozRequestAnimationFrame != null) {
		this.RAF = window.mozRequestAnimationFrame;
	} else if(window.webkitRequestAnimationFrame != null) {
		this.RAF = window.webkitRequestAnimationFrame;
	} else if(window.msRequestAnimationFrame != null) {
		this.RAF = window.msRequestAnimationFrame;
	}
	if(($_=window,$bind($_,$_.cancelAnimationFrame)) != null) {
		this.CAF = ($_=window,$bind($_,$_.cancelAnimationFrame));
	} else if(window.mozCancelAnimationFrame != null) {
		this.CAF = window.mozCancelAnimationFrame;
	} else if(window.webkitCancelAnimationFrame != null) {
		this.CAF = window.webkitCancelAnimationFrame;
	} else if(window.msCancelAnimationFrame != null) {
		this.CAF = window.msCancelAnimationFrame;
	}
	if(this.RAF != null) {
		this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
	}
};
Perf.__name__ = true;
Perf.prototype = {
	_init: function() {
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_now: function() {
		if(this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null) {
			return this._perfObj.now();
		} else {
			return new Date().getTime();
		}
	}
	,_tick: function(val) {
		var time = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._ticks++;
		if(this._raf != null && time > this._prevTime + Perf.MEASUREMENT_INTERVAL) {
			this.currentMs = Math.round(time - this._startTime);
			this.ms.innerHTML = "MS: " + this.currentMs;
			this.currentFps = Math.round(this._ticks * 1000 / (time - this._prevTime));
			if(this.currentFps > 0 && val > Perf.DELAY_TIME) {
				this._measureCount++;
				this._totalFps += this.currentFps;
				this.lowFps = this._fpsMin = Math.min(this._fpsMin,this.currentFps);
				this._fpsMax = Math.max(this._fpsMax,this.currentFps);
				this.avgFps = Math.round(this._totalFps / this._measureCount);
			}
			this.fps.innerHTML = "FPS: " + this.currentFps + " (" + this._fpsMin + "-" + this._fpsMax + ")";
			if(this.currentFps >= 30) {
				this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
			} else if(this.currentFps >= 15) {
				this.fps.style.backgroundColor = Perf.FPS_WARN_BG_CLR;
			} else {
				this.fps.style.backgroundColor = Perf.FPS_PROB_BG_CLR;
			}
			this._prevTime = time;
			this._ticks = 0;
			if(this._memCheck) {
				this.currentMem = this._getFormattedSize(this._memoryObj.usedJSHeapSize,2);
				this.memory.innerHTML = "MEM: " + this.currentMem;
			}
		}
		this._startTime = time;
		if(this._raf != null) {
			this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
		}
	}
	,_createDiv: function(id,top) {
		if(top == null) {
			top = 0;
		}
		var div = window.document.createElement("div");
		div.id = id;
		div.className = id;
		div.style.position = "absolute";
		var _g = this._pos;
		switch(_g) {
		case "BL":
			div.style.left = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "BR":
			div.style.right = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "TL":
			div.style.left = this._offset + "px";
			div.style.top = top + "px";
			break;
		case "TR":
			div.style.right = this._offset + "px";
			div.style.top = top + "px";
			break;
		}
		div.style.width = "80px";
		div.style.height = "12px";
		div.style.lineHeight = "12px";
		div.style.padding = "2px";
		div.style.fontFamily = Perf.FONT_FAMILY;
		div.style.fontSize = "9px";
		div.style.fontWeight = "bold";
		div.style.textAlign = "center";
		window.document.body.appendChild(div);
		return div;
	}
	,_createFpsDom: function() {
		this.fps = this._createDiv("fps");
		this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
		this.fps.style.zIndex = "995";
		this.fps.style.color = Perf.FPS_TXT_CLR;
		this.fps.innerHTML = "FPS: 0";
	}
	,_createMsDom: function() {
		this.ms = this._createDiv("ms",16);
		this.ms.style.backgroundColor = Perf.MS_BG_CLR;
		this.ms.style.zIndex = "996";
		this.ms.style.color = Perf.MS_TXT_CLR;
		this.ms.innerHTML = "MS: 0";
	}
	,_createMemoryDom: function() {
		this.memory = this._createDiv("memory",32);
		this.memory.style.backgroundColor = Perf.MEM_BG_CLR;
		this.memory.style.color = Perf.MEM_TXT_CLR;
		this.memory.style.zIndex = "997";
		this.memory.innerHTML = "MEM: 0";
	}
	,_getFormattedSize: function(bytes,frac) {
		if(frac == null) {
			frac = 0;
		}
		var sizes = ["Bytes","KB","MB","GB","TB"];
		if(bytes == 0) {
			return "0";
		}
		var precision = Math.pow(10,frac);
		var i = Math.floor(Math.log(bytes) / Math.log(1024));
		return Math.round(bytes * precision / Math.pow(1024,i)) / precision + " " + sizes[i];
	}
	,addInfo: function(val) {
		this.info = this._createDiv("info",this._memCheck ? 48 : 32);
		this.info.style.backgroundColor = Perf.INFO_BG_CLR;
		this.info.style.color = Perf.INFO_TXT_CLR;
		this.info.style.zIndex = "998";
		this.info.innerHTML = val;
	}
	,clearInfo: function() {
		if(this.info != null) {
			window.document.body.removeChild(this.info);
			this.info = null;
		}
	}
	,destroy: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
		this._perfObj = null;
		this._memoryObj = null;
		if(this.fps != null) {
			window.document.body.removeChild(this.fps);
			this.fps = null;
		}
		if(this.ms != null) {
			window.document.body.removeChild(this.ms);
			this.ms = null;
		}
		if(this.memory != null) {
			window.document.body.removeChild(this.memory);
			this.memory = null;
		}
		this.clearInfo();
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_cancelRAF: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
	}
};
var Random = function() { };
Random.__name__ = true;
Random.bool = function() {
	return Math.random() < 0.5;
};
Random["int"] = function(from,to) {
	return from + Math.floor((to - from + 1) * Math.random());
};
Random["float"] = function(from,to) {
	return from + (to - from) * Math.random();
};
Random.string = function(length,charactersToUse) {
	if(charactersToUse == null) {
		charactersToUse = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
	}
	var str = "";
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		str += charactersToUse.charAt(Math.floor((charactersToUse.length - 1 + 1) * Math.random()));
	}
	return str;
};
Random.date = function(earliest,latest) {
	var from = earliest.getTime();
	var t = from + (latest.getTime() - from) * Math.random();
	return new Date(t);
};
Random.fromArray = function(arr) {
	if(arr != null && arr.length > 0) {
		return arr[Math.floor((arr.length - 1 + 1) * Math.random())];
	} else {
		return null;
	}
};
Random.shuffle = function(arr) {
	if(arr != null) {
		var _g1 = 0;
		var _g = arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			var j = Math.floor((arr.length - 1 + 1) * Math.random());
			var a = arr[i];
			var b = arr[j];
			arr[i] = b;
			arr[j] = a;
		}
	}
	return arr;
};
Random.fromIterable = function(it) {
	if(it != null) {
		var arr = Lambda.array(it);
		if(arr != null && arr.length > 0) {
			return arr[Math.floor((arr.length - 1 + 1) * Math.random())];
		} else {
			return null;
		}
	} else {
		return null;
	}
};
Random.enumConstructor = function(e) {
	if(e != null) {
		var arr = e.__empty_constructs__;
		if(arr != null && arr.length > 0) {
			return arr[Math.floor((arr.length - 1 + 1) * Math.random())];
		} else {
			return null;
		}
	} else {
		return null;
	}
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var hx_mashine_Reel = function(reelId) {
	this.fruit = [];
	this.reelId = reelId;
	this.fruit[0] = new hx_mashine_Symbols(1,"kruska");
	this.fruit[1] = new hx_mashine_Symbols(2,"zvezda");
	this.fruit[2] = new hx_mashine_Symbols(3,"jagoda");
	this.fruit[3] = new hx_mashine_Symbols(4,"7");
	this.fruit[4] = new hx_mashine_Symbols(5,"tresnja");
	this.fruit[5] = new hx_mashine_Symbols(6,"limun");
	this.fruit[6] = new hx_mashine_Symbols(7,"BAR");
	this.fruit[7] = new hx_mashine_Symbols(8,"banana");
	this.fruit[8] = new hx_mashine_Symbols(9,"kruna");
	var ran = Math.floor((this.fruit.length - 1 + 1) * Math.random());
	try {
		console.log("------RAN----- " + ran);
		this.chosen = this.fruit[ran].GetSymbol();
		this.chosenId = this.fruit[ran].GetId() - 1;
	} catch( err ) {
		console.log("!!!!!!!!!!!UFATIO!!!!!!!!!!!");
	}
};
hx_mashine_Reel.__name__ = true;
hx_mashine_Reel.prototype = {
	getChosen: function() {
		return this.chosen;
	}
	,getChosenId: function() {
		return this.chosenId;
	}
};
var hx_mashine_Spinner = function() {
	this._resultsId = [];
	this._results = [];
};
hx_mashine_Spinner.__name__ = true;
hx_mashine_Spinner.prototype = {
	spinn: function(spinnerId,nrOfReeels) {
		this.nrOfReels = nrOfReeels;
		this.spinnerId = spinnerId;
		var i = 0;
		while(i < nrOfReeels) {
			var reel = new hx_mashine_Reel(i);
			reel.getChosen();
			this._results.push(reel.getChosen());
			this._resultsId.push(reel.getChosenId());
			++i;
		}
		var results = new hx_slotGame_Results();
		results.SetRes(this._results);
		var gui = new hx_slotGui_TestSlotGui();
		gui.setResults(this._resultsId);
	}
	,setResultsId: function(resultsid) {
		this._resultsId = resultsid;
	}
	,get_ResultsId: function() {
		return this._resultsId;
	}
};
var hx_mashine_Symbols = function(symbolsId,symbol) {
	this.symbol = symbol;
	this.symbolsId = symbolsId;
};
hx_mashine_Symbols.__name__ = true;
hx_mashine_Symbols.prototype = {
	GetSymbol: function() {
		return this.symbol;
	}
	,GetId: function() {
		return this.symbolsId;
	}
};
var hx_slotGame_Game = function() {
	var user = new hx_userAc_User(1,"Dusan","dr","pass",1000);
	var spinner = new hx_mashine_Spinner();
	spinner.spinn(1,3);
};
hx_slotGame_Game.__name__ = true;
var hx_slotGame_Results = function() {
	this.res = [];
};
hx_slotGame_Results.__name__ = true;
hx_slotGame_Results.prototype = {
	checkWin: function() {
		var isWin = true;
		var i = 0;
		while(i < this.res.length) {
			if(this.res[i] == null ? this.res[0] == null : this.res[0] != this.res[i]) {
				isWin = false;
				break;
			} else {
				isWin = true;
			}
			++i;
		}
		if(isWin) {
			console.log("CESTITAMOOO");
		} else {
			console.log("pokusaj ponovo");
		}
	}
	,SetRes: function(res) {
		this.res = res;
		console.log("REZULTAT " + Std.string(res));
		this.checkWin();
	}
	,get_res: function() {
		return this.res;
	}
};
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.__name__ = true;
pixi_plugins_app_Application.prototype = {
	_setDefaultValues: function() {
		this._animationFrameId = null;
		this.pixelRatio = 1;
		this.autoResize = true;
		this.transparent = false;
		this.antialias = false;
		this.forceFXAA = false;
		this.roundPixels = false;
		this.clearBeforeRender = true;
		this.preserveDrawingBuffer = false;
		this.backgroundColor = 16777215;
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.position = "static";
	}
	,start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		if(rendererType == null) {
			this.app = new PIXI.Application(this.width,this.height,renderingOptions);
		} else if(rendererType == "canvas") {
			this.app = new PIXI.Application(this.width,this.height,renderingOptions,true);
		} else {
			this.app = new PIXI.Application(this.width,this.height,renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,pauseRendering: function() {
		this.app.stop();
	}
	,resumeRendering: function() {
		this.app.start();
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,addStats: function() {
		if(window.Perf != null) {
			new Perf().addInfo(["UNKNOWN","WEBGL","CANVAS"][this.app.renderer.type] + " - " + this.pixelRatio);
		}
	}
};
var hx_slotGui_TestSlotGui = function() {
	this.speed = [15,20,25];
	this.initPosition = [];
	this.slotSprite = [];
	this.yPosChosen = [];
	this.gameStatus = 0;
	this.nrOfSymbols = 9;
	this.nrOfSpinning = 3;
	this.symbolWidth = 100;
	this.symbolHeight = 100;
	this.inititalX = 25;
	this.nrOfReels = 3;
	this.isWin = 3;
	this.spinning = 2;
	this.running = 1;
	this.startState = 0;
	this.spinButtonPressedIMG = "/img/spin button pressed.png";
	this.spinButtonIMG = "/img/spin button.png";
	this.sybolsReelIMG = "/img/symbols.png";
	this.mashineGuiIMG = "/img/masina.png";
	this._results = [];
	pixi_plugins_app_Application.call(this);
	this._init();
};
hx_slotGui_TestSlotGui.__name__ = true;
hx_slotGui_TestSlotGui.__super__ = pixi_plugins_app_Application;
hx_slotGui_TestSlotGui.prototype = $extend(pixi_plugins_app_Application.prototype,{
	_init: function() {
		this.backgroundColor = 0;
		this.antialias = false;
		this.transparent = false;
		this.onUpdate = $bind(this,this._onUpdate);
		pixi_plugins_app_Application.prototype.start.call(this);
		window.document.body.appendChild(this.renderer.view);
		var style = { };
		style.fill = 16248583;
		style.fontSize = 24;
		style.fontFamily = "Courier";
		this._label = new PIXI.Text("",style);
		this._label.position.set(0,550);
		console.log("pocetak ucitavanja");
		var loader = new PIXI.loaders.Loader();
		loader.add(this.mashineGuiIMG);
		loader.add(this.sybolsReelIMG);
		loader.add(this.spinButtonIMG);
		loader.add(this.spinButtonPressedIMG);
		loader.on("progress",$bind(this,this.loading));
		loader.load($bind(this,this.setup));
	}
	,loading: function() {
		this._label.text = "ucitavam";
		console.log("ucitavam");
	}
	,setup: function() {
		var _gthis = this;
		this.gameStatus = this.startState;
		this._label.text = "ucitano";
		console.log("ucitano");
		var masinaSprite = new PIXI.Sprite(PIXI.Texture.fromImage(this.mashineGuiIMG));
		masinaSprite.x = 0;
		masinaSprite.y = 0;
		this.stage.addChild(masinaSprite);
		this.initPosition = [1,1,1];
		var reelTexture = PIXI.Texture.fromImage(this.sybolsReelIMG);
		var _g1 = 0;
		var _g = this.nrOfReels;
		while(_g1 < _g) {
			var i = _g1++;
			this.slotSprite[i] = new PIXI.extras.TilingSprite(reelTexture,this.symbolWidth,this.symbolHeight + 27);
			this.slotSprite[i].tilePosition.x = 0;
			this.slotSprite[i].tilePosition.y = -this.initPosition[i] * this.symbolHeight + 3;
			this.slotSprite[i].x = this.inititalX + i * 117;
			this.slotSprite[i].y = 190;
			this.stage.addChild(this.slotSprite[i]);
		}
		this._swap = false;
		this.buttonTexture = PIXI.Texture.fromImage(this.spinButtonIMG);
		this.pressedButtonTexture = PIXI.Texture.fromImage(this.spinButtonPressedIMG);
		this.buttonSprite = new PIXI.Sprite(this.buttonTexture);
		this.buttonSprite.buttonMode = true;
		this.buttonSprite.x = 100;
		this.buttonSprite.y = 370;
		this.buttonSprite.scale.set(0.2,0.2);
		this.buttonSprite.interactive = true;
		this.buttonSprite.buttonMode = true;
		this.buttonSprite2 = new PIXI.Sprite(this.buttonTexture);
		this.buttonSprite2.buttonMode = true;
		this.buttonSprite2.x = 250;
		this.buttonSprite2.y = 370;
		this.buttonSprite2.scale.set(0.2,0.2);
		this.buttonSprite2.interactive = true;
		this.buttonSprite2.buttonMode = true;
		this.buttonSprite.mouseover = function(e) {
			_gthis.buttonSprite.texture = _gthis.pressedButtonTexture;
			_gthis._label.text = "Over";
			console.log(" over");
		};
		this.buttonSprite.mouseout = function(e1) {
			_gthis.buttonSprite.texture = _gthis.buttonTexture;
			_gthis._label.text = "out";
			console.log(" out");
		};
		this.stage.addChild(this._label);
		this.buttonSprite.on("click",$bind(this,this.spinReels));
		this.buttonSprite2.on("click",$bind(this,this.resetGame));
		this.stage.addChild(this.buttonSprite);
		this.stage.addChild(this.buttonSprite2);
		this.renderer.render(this.stage);
		this.blurFilter = new PIXI.filters.BlurFilter();
		masinaSprite.filters = [this.blurFilter];
		this._count = 0;
	}
	,resetGame: function() {
		var res = new hx_mashine_Spinner();
		console.log(" get result " + Std.string(res.get_ResultsId()));
	}
	,spinReels: function() {
		this._swap = !this._swap;
		this._label.text = "stisnuto dugme " + Std.string(this._swap);
		console.log("stisnuto dugme" + Std.string(this._swap));
		this.buttonSprite.texture = this._swap ? this.pressedButtonTexture : this.buttonTexture;
		this.spinAnimate();
	}
	,_onUpdate: function(elapsedTime) {
		this._count += 0.01;
		var blurAmount1 = Math.cos(this._count);
		this.blurFilter.blur = 5 * blurAmount1;
	}
	,spinAnimate: function() {
		if(this.gameStatus == this.isWin || this.gameStatus == this.startState) {
			this.initPosition = this._results;
			var _g1 = 0;
			var _g = this.nrOfReels;
			while(_g1 < _g) {
				var i = _g1++;
				this.slotSprite[i].tilePosition.y = -this.initPosition[i] * this.symbolHeight + 27;
				this.yPosChosen[i] = this.nrOfSpinning * this.symbolHeight * this.nrOfSymbols;
			}
			this.gameStatus = this.spinning;
			this.draw();
			return;
		}
	}
	,draw: function() {
		if(this.gameStatus == this.spinning) {
			var _g1 = 0;
			var _g = this.nrOfReels;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.yPosChosen[i] > 0) {
					this.slotSprite[i].tilePosition.y += this.speed[i];
					var tmp = this.yPosChosen[i] -= this.speed[i];
					this._label.text = " brzina " + tmp;
				}
				if(this.yPosChosen[0] - 5 <= 0) {
					this.gameStatus = this.isWin;
				}
			}
			window.requestAnimationFrame($bind(this,this.draw));
		}
		console.log("resultat U DRAW" + Std.string(this._results));
		return;
	}
	,setResults: function(results) {
		this._results = results;
		console.log(" iz gui rezultat " + Std.string(results));
	}
	,getResults: function() {
		return this._results;
	}
});
var hx_userAc_User = function(userId,name,username,password,credit) {
	this.userId = userId;
	this.name = name;
	this.username = username;
	this.password = password;
	this.credit = credit;
};
hx_userAc_User.__name__ = true;
hx_userAc_User.prototype = {
	toString: function() {
		return "Created user " + this.username;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = ["Date"];
Perf.MEASUREMENT_INTERVAL = 1000;
Perf.FONT_FAMILY = "Helvetica,Arial";
Perf.FPS_BG_CLR = "#00FF00";
Perf.FPS_WARN_BG_CLR = "#FF8000";
Perf.FPS_PROB_BG_CLR = "#FF0000";
Perf.MS_BG_CLR = "#FFFF00";
Perf.MEM_BG_CLR = "#086A87";
Perf.INFO_BG_CLR = "#00FFFF";
Perf.FPS_TXT_CLR = "#000000";
Perf.MS_TXT_CLR = "#000000";
Perf.MEM_TXT_CLR = "#FFFFFF";
Perf.INFO_TXT_CLR = "#000000";
Perf.TOP_LEFT = "TL";
Perf.TOP_RIGHT = "TR";
Perf.BOTTOM_LEFT = "BL";
Perf.BOTTOM_RIGHT = "BR";
Perf.DELAY_TIME = 4000;
pixi_plugins_app_Application.AUTO = "auto";
pixi_plugins_app_Application.RECOMMENDED = "recommended";
pixi_plugins_app_Application.CANVAS = "canvas";
pixi_plugins_app_Application.WEBGL = "webgl";
pixi_plugins_app_Application.POSITION_STATIC = "static";
pixi_plugins_app_Application.POSITION_ABSOLUTE = "absolute";
pixi_plugins_app_Application.POSITION_FIXED = "fixed";
pixi_plugins_app_Application.POSITION_RELATIVE = "relative";
pixi_plugins_app_Application.POSITION_INITIAL = "initial";
pixi_plugins_app_Application.POSITION_INHERIT = "inherit";
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
